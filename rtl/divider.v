// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="divider_divider,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.522000,HLS_SYN_LAT=15,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=560,HLS_SYN_LUT=396,HLS_VERSION=2023_1}" *)

module divider (
        ap_clk,
        ap_rst,
        lhs,
        rhs,
        in_ready_o,
        in_valid_i,
        quotient,
        out_ready_i,
        out_valid_o
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [7:0] lhs;
input  [7:0] rhs;
output  [0:0] in_ready_o;
input  [0:0] in_valid_i;
output  [7:0] quotient;
input  [0:0] out_ready_i;
output  [0:0] out_valid_o;

reg   [0:0] valid_internal;
reg   [7:0] result;
reg   [0:0] empty_reg_112;
reg   [0:0] empty_reg_112_pp0_iter1_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] empty_reg_112_pp0_iter2_reg;
reg   [0:0] empty_reg_112_pp0_iter3_reg;
reg   [0:0] empty_reg_112_pp0_iter4_reg;
reg   [0:0] empty_reg_112_pp0_iter5_reg;
reg   [0:0] empty_reg_112_pp0_iter6_reg;
reg   [0:0] empty_reg_112_pp0_iter7_reg;
reg   [0:0] empty_reg_112_pp0_iter8_reg;
reg   [0:0] empty_reg_112_pp0_iter9_reg;
reg   [0:0] empty_reg_112_pp0_iter10_reg;
reg   [0:0] empty_reg_112_pp0_iter11_reg;
reg   [0:0] empty_reg_112_pp0_iter12_reg;
reg   [0:0] empty_reg_112_pp0_iter13_reg;
reg   [0:0] empty_reg_112_pp0_iter14_reg;
reg   [0:0] valid_internal_load_reg_204;
reg   [0:0] valid_internal_load_reg_204_pp0_iter1_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter2_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter3_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter4_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter5_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter6_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter7_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter8_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter9_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter10_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter11_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter12_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter13_reg;
reg   [0:0] valid_internal_load_reg_204_pp0_iter14_reg;
wire   [0:0] or_ln31_fu_135_p2;
reg   [0:0] or_ln31_reg_209;
reg   [0:0] or_ln31_reg_209_pp0_iter1_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter2_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter3_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter4_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter5_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter6_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter7_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter8_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter9_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter10_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter11_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter12_reg;
reg   [0:0] or_ln31_reg_209_pp0_iter13_reg;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg   [0:0] ap_phi_mux_valid_internal_flag_0_phi_fu_104_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_internal_flag_0_reg_101;
reg   [0:0] ap_phi_mux_empty_phi_fu_116_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_empty_reg_112;
wire   [0:0] xor_ln45_fu_171_p2;
wire   [0:0] or_ln45_fu_165_p2;
wire    ap_block_pp0_stage0;
wire   [7:0] trunc_ln37_fu_183_p1;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] xor_ln31_fu_129_p2;
wire   [10:0] grp_fu_153_p0;
wire   [0:0] and_ln45_fu_159_p2;
wire   [7:0] grp_fu_153_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_156;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 valid_internal = 1'd0;
#0 result = 8'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

divider_sdiv_11ns_8s_8_15_1 #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
sdiv_11ns_8s_8_15_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_153_p0),
    .din1(rhs),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_156)) begin
        if ((or_ln31_fu_135_p2 == 1'd0)) begin
            empty_reg_112 <= 1'd1;
        end else if ((or_ln31_fu_135_p2 == 1'd1)) begin
            empty_reg_112 <= valid_internal;
        end else if ((1'b1 == 1'b1)) begin
            empty_reg_112 <= ap_phi_reg_pp0_iter0_empty_reg_112;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        empty_reg_112_pp0_iter10_reg <= empty_reg_112_pp0_iter9_reg;
        empty_reg_112_pp0_iter11_reg <= empty_reg_112_pp0_iter10_reg;
        empty_reg_112_pp0_iter12_reg <= empty_reg_112_pp0_iter11_reg;
        empty_reg_112_pp0_iter13_reg <= empty_reg_112_pp0_iter12_reg;
        empty_reg_112_pp0_iter14_reg <= empty_reg_112_pp0_iter13_reg;
        empty_reg_112_pp0_iter2_reg <= empty_reg_112_pp0_iter1_reg;
        empty_reg_112_pp0_iter3_reg <= empty_reg_112_pp0_iter2_reg;
        empty_reg_112_pp0_iter4_reg <= empty_reg_112_pp0_iter3_reg;
        empty_reg_112_pp0_iter5_reg <= empty_reg_112_pp0_iter4_reg;
        empty_reg_112_pp0_iter6_reg <= empty_reg_112_pp0_iter5_reg;
        empty_reg_112_pp0_iter7_reg <= empty_reg_112_pp0_iter6_reg;
        empty_reg_112_pp0_iter8_reg <= empty_reg_112_pp0_iter7_reg;
        empty_reg_112_pp0_iter9_reg <= empty_reg_112_pp0_iter8_reg;
        or_ln31_reg_209_pp0_iter10_reg <= or_ln31_reg_209_pp0_iter9_reg;
        or_ln31_reg_209_pp0_iter11_reg <= or_ln31_reg_209_pp0_iter10_reg;
        or_ln31_reg_209_pp0_iter12_reg <= or_ln31_reg_209_pp0_iter11_reg;
        or_ln31_reg_209_pp0_iter13_reg <= or_ln31_reg_209_pp0_iter12_reg;
        or_ln31_reg_209_pp0_iter2_reg <= or_ln31_reg_209_pp0_iter1_reg;
        or_ln31_reg_209_pp0_iter3_reg <= or_ln31_reg_209_pp0_iter2_reg;
        or_ln31_reg_209_pp0_iter4_reg <= or_ln31_reg_209_pp0_iter3_reg;
        or_ln31_reg_209_pp0_iter5_reg <= or_ln31_reg_209_pp0_iter4_reg;
        or_ln31_reg_209_pp0_iter6_reg <= or_ln31_reg_209_pp0_iter5_reg;
        or_ln31_reg_209_pp0_iter7_reg <= or_ln31_reg_209_pp0_iter6_reg;
        or_ln31_reg_209_pp0_iter8_reg <= or_ln31_reg_209_pp0_iter7_reg;
        or_ln31_reg_209_pp0_iter9_reg <= or_ln31_reg_209_pp0_iter8_reg;
        valid_internal_load_reg_204_pp0_iter10_reg <= valid_internal_load_reg_204_pp0_iter9_reg;
        valid_internal_load_reg_204_pp0_iter11_reg <= valid_internal_load_reg_204_pp0_iter10_reg;
        valid_internal_load_reg_204_pp0_iter12_reg <= valid_internal_load_reg_204_pp0_iter11_reg;
        valid_internal_load_reg_204_pp0_iter13_reg <= valid_internal_load_reg_204_pp0_iter12_reg;
        valid_internal_load_reg_204_pp0_iter14_reg <= valid_internal_load_reg_204_pp0_iter13_reg;
        valid_internal_load_reg_204_pp0_iter2_reg <= valid_internal_load_reg_204_pp0_iter1_reg;
        valid_internal_load_reg_204_pp0_iter3_reg <= valid_internal_load_reg_204_pp0_iter2_reg;
        valid_internal_load_reg_204_pp0_iter4_reg <= valid_internal_load_reg_204_pp0_iter3_reg;
        valid_internal_load_reg_204_pp0_iter5_reg <= valid_internal_load_reg_204_pp0_iter4_reg;
        valid_internal_load_reg_204_pp0_iter6_reg <= valid_internal_load_reg_204_pp0_iter5_reg;
        valid_internal_load_reg_204_pp0_iter7_reg <= valid_internal_load_reg_204_pp0_iter6_reg;
        valid_internal_load_reg_204_pp0_iter8_reg <= valid_internal_load_reg_204_pp0_iter7_reg;
        valid_internal_load_reg_204_pp0_iter9_reg <= valid_internal_load_reg_204_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_112_pp0_iter1_reg <= empty_reg_112;
        or_ln31_reg_209 <= or_ln31_fu_135_p2;
        or_ln31_reg_209_pp0_iter1_reg <= or_ln31_reg_209;
        valid_internal_load_reg_204 <= valid_internal;
        valid_internal_load_reg_204_pp0_iter1_reg <= valid_internal_load_reg_204;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln31_reg_209_pp0_iter13_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        result <= trunc_ln37_fu_183_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln45_fu_165_p2 == 1'd1) & (1'b1 == 1'b1))) begin
        valid_internal <= xor_ln45_fu_171_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((or_ln31_fu_135_p2 == 1'd0)) begin
        ap_phi_mux_empty_phi_fu_116_p4 = 1'd1;
    end else if ((or_ln31_fu_135_p2 == 1'd1)) begin
        ap_phi_mux_empty_phi_fu_116_p4 = valid_internal;
    end else begin
        ap_phi_mux_empty_phi_fu_116_p4 = ap_phi_reg_pp0_iter0_empty_reg_112;
    end
end

always @ (*) begin
    if ((or_ln31_fu_135_p2 == 1'd0)) begin
        ap_phi_mux_valid_internal_flag_0_phi_fu_104_p4 = 1'd1;
    end else if ((or_ln31_fu_135_p2 == 1'd1)) begin
        ap_phi_mux_valid_internal_flag_0_phi_fu_104_p4 = 1'd0;
    end else begin
        ap_phi_mux_valid_internal_flag_0_phi_fu_104_p4 = ap_phi_reg_pp0_iter0_valid_internal_flag_0_reg_101;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln45_fu_159_p2 = (out_ready_i & ap_phi_mux_empty_phi_fu_116_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_156 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_empty_reg_112 = 'bx;

assign ap_phi_reg_pp0_iter0_valid_internal_flag_0_reg_101 = 'bx;

assign grp_fu_153_p0 = {{lhs}, {3'd0}};

assign in_ready_o = (valid_internal_load_reg_204_pp0_iter14_reg ^ 1'd1);

assign or_ln31_fu_135_p2 = (xor_ln31_fu_129_p2 | valid_internal);

assign or_ln45_fu_165_p2 = (ap_phi_mux_valid_internal_flag_0_phi_fu_104_p4 | and_ln45_fu_159_p2);

assign out_valid_o = empty_reg_112_pp0_iter14_reg;

assign quotient = result;

assign trunc_ln37_fu_183_p1 = grp_fu_153_p2[7:0];

assign xor_ln31_fu_129_p2 = (in_valid_i ^ 1'd1);

assign xor_ln45_fu_171_p2 = (1'd1 ^ and_ln45_fu_159_p2);

endmodule //divider
